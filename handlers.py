import os
import re
import pytz
from datetime import datetime, timedelta
import logging

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, User
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.markdown import hbold, html_decoration

import db as db
import kb
from states import Registration, AuctionCreation, Bidding

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = os.getenv("ADMIN_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
CHANNEL_ID = os.getenv("CHANNEL_ID")

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# --- Middleware –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

@router.message.middleware()
@router.callback_query.middleware()
async def user_status_middleware(handler, event, data):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–≥–æ username.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ callback.
    """
    user: User = data.get('event_from_user')
    if not user:
        return await handler(event, data)

    if str(user.id) == ADMIN_ID:
        return await handler(event, data)

    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    await db.update_user_username(user.id, user.username)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã start, admin –∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if isinstance(event, Message) and event.text in ["/start", "/admin"]:
        return await handler(event, data)
    if await data['state'].get_state() is not None:
        return await handler(event, data)

    status = await db.get_user_status(user.id)
    if status == 'banned':
        if isinstance(event, Message):
            await event.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        elif isinstance(event, CallbackQuery):
            await event.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    if status == 'pending':
        if isinstance(event, Message):
            await event.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        elif isinstance(event, CallbackQuery):
            await event.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", show_alert=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    return await handler(event, data)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def normalize_phone(phone: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX."""
    cleaned_phone = re.sub(r'\D', '', phone)
    if len(cleaned_phone) == 10 and cleaned_phone.startswith('9'):
        return '+7' + cleaned_phone
    if len(cleaned_phone) == 11 and (cleaned_phone.startswith('7') or cleaned_phone.startswith('8')):
        return '+7' + cleaned_phone[1:]
    return phone


async def format_auction_post(auction_data: dict, bot: Bot, finished: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–û–í–ï–†–ö–û–ô BLITZ)."""
    last_bid = await db.get_last_bid(auction_data['auction_id'])
    bot_info = await bot.get_me()
    safe_title = (auction_data['title'])
    safe_description = (auction_data['description'])

    if finished:
        if last_bid:
            winner_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è @{(last_bid['username'])} —Å –≤—ã–∏–≥—Ä—ã—à–µ–º –ª–æ—Ç–∞ –∑–∞ {last_bid['bid_amount']:,.2f} —Ä—É–±.!"
            return (
                f"<b>üî¥ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                f"üíé <b>{safe_title}</b>\n\n"
                f"{winner_text}"
            )
        else:
            return (
                f"<b>üî¥ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                f"üíé <b>{safe_title}</b>\n\n"
                f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."
            )

    current_price = last_bid['bid_amount'] if last_bid else auction_data['start_price']
    leader_text = f"@{(last_bid['username'])}" if last_bid else "–°—Ç–∞–≤–æ–∫ –µ—â–µ –Ω–µ—Ç"
    end_time_from_db = auction_data['end_time']
    end_time_dt = end_time_from_db.astimezone(MOSCOW_TZ)

    blitz_price_text = ""
    if auction_data.get('blitz_price'):
        blitz_price_text = f"‚ö°Ô∏è <b>–ë–ª–∏—Ü-—Ü–µ–Ω–∞:</b> {auction_data['blitz_price']:,.2f} —Ä—É–±.\n\n"

    text = (
        f"üíé <b>{safe_title}</b>\n\n"
        f"{safe_description}\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {current_price:,.2f} —Ä—É–±.\n"
        f"üëë <b>–õ–∏–¥–µ—Ä:</b> {leader_text}\n"
        f"{blitz_price_text}"
        f"‚è≥ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_dt.strftime('%d.%m.%Y –≤ %H:%M')} (–ú–°–ö)\n\n"
        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –∏ —Å—Ç–∞–≤–æ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞: @{bot_info.username}"
    )
    return text

# --- 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---

@router.message(CommandStart(), StateFilter(default_state))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_status = await db.get_user_status(message.from_user.id)
    if user_status == 'approved':
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!", reply_markup=kb.get_main_menu())
    else:
        await state.set_state(Registration.waiting_for_full_name)
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
        )


@router.message(StateFilter(Registration.waiting_for_full_name))
async def process_full_name(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await state.update_data(full_name=message.text)
    await state.set_state(Registration.waiting_for_phone)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                         reply_markup=kb.get_phone_keyboard())


@router.message(StateFilter(Registration.waiting_for_phone), F.contact)
async def process_phone(message: Message, state: FSMContext, bot: Bot):
    """–õ–æ–≤–∏—Ç –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."""
    phone_number = normalize_phone(message.contact.phone_number)
    user_data = await state.get_data()

    await db.add_user_request(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=user_data['full_name'],
        phone_number=phone_number
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                         reply_markup=ReplyKeyboardRemove())

    try:
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
            f"ID: `{message.from_user.id}`\n"
            f"Username: @{message.from_user.username}\n"
            f"–§–ò–û: {user_data['full_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: `{phone_number}`",
            parse_mode="HTML",
            reply_markup=kb.admin_approval_keyboard(message.from_user.id)
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
        await message.bot.send_message(ADMIN_ID,
                                       "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —á–∞—Ç–∞ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

    await state.clear()


# --- 2. –ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–Ø–í–û–ö (–ê–î–ú–ò–ù) ---

@router.callback_query(F.data.startswith("approve_user_"))
async def approve_user(callback: CallbackQuery, bot: Bot):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(callback.data.split("_")[2])
    await db.update_user_status(user_id, 'approved')
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")
    try:
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö.",
                               reply_markup=kb.get_main_menu())
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    await callback.answer()


@router.callback_query(F.data.startswith("decline_user_"))
async def decline_user(callback: CallbackQuery, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    user_id = int(callback.data.split("_")[2])
    await db.update_user_status(user_id, 'banned')
    await callback.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω/–∑–∞–±–∞–Ω–µ–Ω.")
    try:
        await bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    await callback.answer()


# --- 3. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ü–†–û–°–ú–û–¢–† –ê–£–ö–¶–ò–û–ù–ê ---

@router.message(F.text == "üíé –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω")
async def show_current_auction(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ –õ–°."""
    auction = await db.get_active_auction()
    if not auction:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç.")
        return

    text = await format_auction_post(auction, bot)
    await message.answer_photo(
        photo=auction['photo_id'],
        caption=text,
        parse_mode="HTML",
        reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
    )

@router.message(F.text == "üìö –í—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã")
async def show_all_auctions(message: Message):
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.")

@router.message(F.text == "üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_admin(message: Message):
    admin_username = "CoId_Siemens"
    await message.answer(f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{admin_username}")


# --- 4. –õ–û–ì–ò–ö–ê –°–¢–ê–í–û–ö ---

@router.callback_query(F.data.startswith("bid_auction_"))
async def make_bid_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ç–∞–≤–∫–∏."""
    auction_id = int(callback.data.split("_")[2])
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != auction_id:
        await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        await callback.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏
    end_time_dt = auction['end_time']
    time_to_end = end_time_dt - datetime.now(end_time_dt.tzinfo)

    if time_to_end > timedelta(minutes=30):
        last_bid_time = await db.get_user_last_bid_time(callback.from_user.id, auction_id)
        if last_bid_time and (datetime.now(last_bid_time.tzinfo) - last_bid_time) < timedelta(minutes=10):
            remaining_time = timedelta(minutes=10) - (datetime.now(last_bid_time.tzinfo) - last_bid_time)
            await callback.answer(f"–°–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ {remaining_time.seconds // 60 + 1} –º–∏–Ω.",
                                  show_alert=True)
            return

    await state.set_state(Bidding.waiting_for_bid_amount)
    await state.update_data(auction_id=auction_id, private_message_id=callback.message.message_id)

    last_bid = await db.get_last_bid(auction_id)
    current_price = last_bid['bid_amount'] if last_bid else auction['start_price']

    await callback.message.answer(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_price:,.0f} —Ä—É–±.\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {auction['min_step']:,.0f} —Ä—É–±.\n\n"
        f"{hbold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:')}", parse_mode="HTML",
    )
    await callback.answer()


@router.message(StateFilter(Bidding.waiting_for_bid_amount))
async def process_bid_amount(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏."""
    try:
        bid_amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != data['auction_id']:
        await message.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–æ–∫–∞ –≤—ã –¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É.")
        await state.clear()
        return

    last_bid = await db.get_last_bid(auction['auction_id'])
    current_price = last_bid['bid_amount'] if last_bid else auction['start_price']

    if bid_amount < current_price + auction['min_step']:
        await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º {current_price + auction['min_step']:,.0f} —Ä—É–±.")
        return

    previous_leader = last_bid['user_id'] if last_bid else None

    await db.add_bid(auction['auction_id'], message.from_user.id, bid_amount)
    await message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {bid_amount:,.0f} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç–∞!")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞
    if previous_leader and previous_leader != message.from_user.id:
        try:
            await bot.send_message(previous_leader,
                                   f"‚ùóÔ∏è –í–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ '{auction['title']}' –ø–µ—Ä–µ–±–∏–ª–∏! –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {bid_amount:,.0f} —Ä—É–±.")
        except TelegramAPIError as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {previous_leader}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    new_text = await format_auction_post(auction, bot)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=auction['channel_message_id'],
            caption=new_text,
            parse_mode="HTML"
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞
    try:
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=data['private_message_id'],
            caption=new_text,
            parse_mode="HTML",
            reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è {message.chat.id}: {e}")


# --- 5. –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---

@router.message(Command("admin"), F.from_user.id == int(ADMIN_ID))
async def admin_panel(message: Message):
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
                         "/create_auction - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω\n"
                         "/finish_auction - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ\n"
                         "/ban [id] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                         "/unban [id] - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


# --- –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ (FSM) ---
@router.message(Command("create_auction"), F.from_user.id == int(ADMIN_ID))
async def create_auction_start(message: Message, state: FSMContext):
    active_auction = await db.get_active_auction()
    if active_auction:
        await message.answer("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π.")
        return
    await state.set_state(AuctionCreation.waiting_for_title)
    await message.answer("–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:")


@router.message(StateFilter(AuctionCreation.waiting_for_title))
async def process_auction_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AuctionCreation.waiting_for_description)
    await message.answer("–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")


@router.message(StateFilter(AuctionCreation.waiting_for_description))
async def process_auction_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AuctionCreation.waiting_for_photo)
    await message.answer("–®–∞–≥ 3/6: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–æ—Ç–∞:")


@router.message(StateFilter(AuctionCreation.waiting_for_photo), F.photo)
async def process_auction_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(AuctionCreation.waiting_for_start_price)
    await message.answer("–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 150000):")


@router.message(StateFilter(AuctionCreation.waiting_for_start_price))
async def process_auction_start_price(message: Message, state: FSMContext):
    try:
        await state.update_data(start_price=float(message.text))
        await state.set_state(AuctionCreation.waiting_for_blitz_price)
        await message.answer("–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –±–ª–∏—Ü-—Ü–µ–Ω—É (—á–∏—Å–ª–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ - –≤–≤–µ–¥–∏—Ç–µ 0):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150000).")


@router.message(StateFilter(AuctionCreation.waiting_for_blitz_price))
async def process_auction_blitz_price(message: Message, state: FSMContext):
    try:
        blitz_price = float(message.text)
        await state.update_data(blitz_price=blitz_price if blitz_price > 0 else None)
        await state.set_state(AuctionCreation.waiting_for_end_time)
        await message.answer(
            "–®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.10.2025 21:00")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300000).")


@router.message(StateFilter(AuctionCreation.waiting_for_end_time))
async def process_auction_end_time(message: Message, state: FSMContext, bot: Bot):
    try:
        naive_end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        # end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        end_time = MOSCOW_TZ.localize(naive_end_time)
        await state.update_data(end_time=end_time)
        await state.update_data(min_step=1000) # –®–∞–≥ —Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        data = await state.get_data()

        auction_id = await db.create_auction(data)
        auction_data_full = await db.get_active_auction()
        text = await format_auction_post(auction_data_full, bot)

        sent_message = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=data['photo'],
            caption=text,
            parse_mode="HTML"
        )

        await db.set_auction_message_id(auction_id, sent_message.message_id)
        await message.answer(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω ¬´{data['title']}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
    finally:
        await state.clear()


@router.message(Command("finish_auction"), F.from_user.id == int(ADMIN_ID))
async def finish_auction_command(message: Message, bot: Bot):
    active_auction = await db.get_active_auction()
    if not active_auction:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    auction_id = active_auction['auction_id']
    last_bid = await db.get_last_bid(auction_id)

    winner_id = last_bid['user_id'] if last_bid else None
    final_price = last_bid['bid_amount'] if last_bid else None

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await db.finish_auction(auction_id, winner_id, final_price)
    await message.answer(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω ¬´{active_auction['title']}¬ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    finished_post_text = await format_auction_post(active_auction, bot, finished=True)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active_auction['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML"
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")

    # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if winner_id:
        try:
            await bot.send_message(
                winner_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ¬´{(active_auction['title'])}¬ª!\n\n"
                f"–í–∞—à–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {final_price:,.2f} —Ä—É–±.\n\n"
                f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
        except TelegramAPIError as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {winner_id}: {e}")
            await message.answer(
                f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner_id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é.")
