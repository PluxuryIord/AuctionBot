
import os
import re
import pytz
from datetime import datetime, timedelta
import logging

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, User, InputMediaPhoto, BufferedInputFile
from html import escape

from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.markdown import hbold, html_decoration

import db as db
import kb
from states import Registration, AuctionCreation, Bidding, AdminActions

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = os.getenv("ADMIN_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
CHANNEL_ID = os.getenv("CHANNEL_ID")

CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")


async def is_user_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        status = getattr(member, "status", None)
        return status in ("member", "administrator", "creator")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# --- Middleware –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

@router.message.middleware()
@router.callback_query.middleware()
async def user_status_middleware(handler, event, data):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–≥–æ username.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ callback.
    """
    user: User = data.get('event_from_user')
    if not user:
        return await handler(event, data)

    if str(user.id) == ADMIN_ID:
        return await handler(event, data)

    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    await db.update_user_username(user.id, user.username)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º /admin –≤—Å–µ–≥–¥–∞; /start —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö (–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞)
    if isinstance(event, Message) and event.text == "/admin":
        return await handler(event, data)
    if isinstance(event, Message) and event.text == "/start":
        status_for_start = await db.get_user_status(user.id)
        if not status_for_start:  # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å—Ç–∞—Ç—É—Å–∞ –µ—â—ë –Ω–µ—Ç
            return await handler(event, data)
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ FSM —à–∞–≥–∏
    if await data['state'].get_state() is not None:
        return await handler(event, data)

    status = await db.get_user_status(user.id)
    if status == 'banned':
        if isinstance(event, Message):
            await event.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        elif isinstance(event, CallbackQuery):
            await event.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    if status == 'pending':
        if isinstance(event, Message):
            await event.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        elif isinstance(event, CallbackQuery):
            await event.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", show_alert=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
    try:
        bot_inst: Bot = data.get("bot")
    except Exception:
        bot_inst = None
    allow_check = isinstance(event, CallbackQuery) and getattr(event, "data", None) and str(event.data).startswith("check_sub")
    if bot_inst and not allow_check:
        try:
            subscribed = await is_user_subscribed(bot_inst, user.id)
        except Exception:
            subscribed = False
        if not subscribed:
            channel_url = f"https://t.me/{CHANNEL_USERNAME}" if CHANNEL_USERNAME else None
            text = (
                "–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô."
            )
            try:
                if isinstance(event, CallbackQuery) and event.message:
                    msg = event.message
                    if getattr(msg, "photo", None) or msg.caption is not None:
                        await bot_inst.edit_message_caption(
                            chat_id=msg.chat.id,
                            message_id=msg.message_id,
                            caption=text,
                            reply_markup=kb.subscribe_keyboard(channel_url, 0)
                        )
                    else:
                        await bot_inst.edit_message_text(
                            chat_id=msg.chat.id,
                            message_id=msg.message_id,
                            text=text,
                            reply_markup=kb.subscribe_keyboard(channel_url, 0)
                        )
                    try:
                        await event.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞", show_alert=True)
                    except Exception:
                        pass
                else:
                    await event.answer(text, reply_markup=kb.subscribe_keyboard(channel_url, 0))
            except Exception:
                # –§–æ–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    chat_id = event.message.chat.id if isinstance(event, CallbackQuery) else event.chat.id
                    await bot_inst.send_message(chat_id, text, reply_markup=kb.subscribe_keyboard(channel_url, 0))
                except Exception:
                    pass
            return  # –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É


    return await handler(event, data)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def normalize_phone(phone: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX."""
    cleaned_phone = re.sub(r'\D', '', phone)
    if len(cleaned_phone) == 10 and cleaned_phone.startswith('9'):
        return '+7' + cleaned_phone
    if len(cleaned_phone) == 11 and (cleaned_phone.startswith('7') or cleaned_phone.startswith('8')):
        return '+7' + cleaned_phone[1:]
    return phone

# –û–±—â–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –≤–≤–æ–¥–∞
NAME_ALLOWED_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-\s]{2,100}$")

def clean_full_name(s: str) -> str:
    s = (s or "").strip()
    # —Å–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã
    s = re.sub(r"\s+", " ", s)
    return s

def is_valid_full_name(s: str) -> bool:
    return bool(NAME_ALLOWED_RE.match(s))

def parse_amount(s: str) -> float:
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–∞ "100 000,50" –∏ —Ç.–ø.
    s = (s or "").strip().replace(" ", "").replace(",", ".")
    return float(s)

def csv_safe(s: str) -> str:
    s = s or ""
    return ("'" + s) if s[:1] in ("=", "+", "-", "@", "\t") else s



async def format_auction_post(auction_data: dict, bot: Bot, finished: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (—Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∞–∑–∞—Ä—Ç–∞)."""
    last_bid = await db.get_last_bid(auction_data['auction_id'])
    safe_title = escape(auction_data.get('title') or "")
    safe_description = escape(auction_data.get('description') or "")
    bot_info = await bot.get_me()

    if finished:
        if last_bid:
            winner_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è @{(last_bid['username'])} —Å –≤—ã–∏–≥—Ä—ã—à–µ–º –ª–æ—Ç–∞ –∑–∞ {last_bid['bid_amount']:,.2f} —Ä—É–±.!"
            return (
                f"<b>üî¥ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                f"üíé <b>{safe_title}</b>\n\n"
                f"{winner_text}"
            )
        else:
            return (
                f"<b>üî¥ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                f"üíé <b>{safe_title}</b>\n\n"
                f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."
            )

    # –ê–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞, –ª–∏–¥–µ—Ä –∏ –¢–û–ü-5 —Å—Ç–∞–≤–æ–∫
    current_price = last_bid['bid_amount'] if last_bid else auction_data['start_price']
    leader_text = f"@{(last_bid['username'])}" if last_bid else "–°—Ç–∞–≤–æ–∫ –µ—â–µ –Ω–µ—Ç"
    end_time_dt = auction_data['end_time'].astimezone(MOSCOW_TZ)

    # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ (–¢–û–ü-5)
    top_bids = await db.get_top_bids(auction_data['auction_id'], limit=5)
    history = ""
    if top_bids:
        lines = ["\n<b>üî• –¢–æ–ø-5 —Å—Ç–∞–≤–æ–∫:</b>"]
        for i, b in enumerate(top_bids, start=1):
            user_disp = f"@{b['username']}" if b.get('username') else (b.get('full_name') or str(b['user_id']))
            lines.append(f"{i}) {b['bid_amount']:,.0f} ‚ÇΩ ‚Äî {user_disp}")
        history = "\n".join(lines)

    blitz_price_text = ""
    if auction_data.get('blitz_price'):
        blitz_price_text = f"‚ö°Ô∏è <b>–ë–ª–∏—Ü-—Ü–µ–Ω–∞:</b> {auction_data['blitz_price']:,.2f} —Ä—É–±.\n\n"

    text = (
        f"üíé <b>{safe_title}</b>\n\n"
        f"{safe_description}\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {current_price:,.2f} —Ä—É–±.\n"
        f"üëë <b>–õ–∏–¥–µ—Ä:</b> {leader_text}\n"
        f"{blitz_price_text}"
        f"‚è≥ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_dt.strftime('%d.%m.%Y –≤ %H:%M')} (–ú–°–ö)\n"
        f"{history}\n\n"
        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –∏ —Å—Ç–∞–≤–æ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞: @{bot_info.username}"
    )
    return text

# --- 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---

@router.message(CommandStart(), StateFilter(default_state))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_status = await db.get_user_status(message.from_user.id)
    if str(message.from_user.id) == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!", reply_markup=kb.get_main_menu_admin())
    elif user_status == 'banned':
        await message.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    elif user_status == 'pending':
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
    elif user_status == 'approved':
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!", reply_markup=kb.get_main_menu())
    else:
        await state.set_state(Registration.waiting_for_full_name)
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
        )


@router.message(StateFilter(Registration.waiting_for_full_name), F.text)
async def process_full_name(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    name = clean_full_name(message.text)
    if not is_valid_full_name(name):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (2‚Äì100 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).")
        return
    await state.update_data(full_name=name)
    await state.set_state(Registration.waiting_for_phone)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n\n"
        "–ú–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.",
        reply_markup=kb.contact_request_keyboard()
    )



@router.message(StateFilter(Registration.waiting_for_phone), F.contact)
async def process_phone_contact(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'."""
    phone_number = normalize_phone(message.contact.phone_number)
    if not re.fullmatch(r"\+7\d{10}", phone_number or ""):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Å–Ω–æ–≤–∞.")
        return
    existing = await db.get_user_by_phone(phone_number)
    if existing and existing.get('user_id') != message.from_user.id:
        await message.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
        return
    user_data = await state.get_data()

    await db.add_user_request(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=user_data['full_name'],
        phone_number=phone_number
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb.remove_reply_keyboard())
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        await bot.send_message(
            int(ADMIN_CHAT_ID),
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
            f"ID: <code>{message.from_user.id}</code>\n"
            f"Username: @{escape(message.from_user.username or '')}\n"
            f"–§–ò–û: {escape(user_data.get('full_name') or '')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{escape(phone_number)}</code>",
            parse_mode="HTML",
            reply_markup=kb.admin_approval_keyboard(message.from_user.id)
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É: {e}")


@router.message(StateFilter(Registration.waiting_for_phone), F.text)
async def process_phone(message: Message, state: FSMContext, bot: Bot):
    """–õ–æ–≤–∏—Ç –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."""
    phone_number = normalize_phone(message.text)
    if not re.fullmatch(r"\+7\d{10}", phone_number or ""):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return
    existing = await db.get_user_by_phone(phone_number)
    if existing and existing.get('user_id') != message.from_user.id:
        await message.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
        return
    user_data = await state.get_data()

    await db.add_user_request(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=user_data['full_name'],
        phone_number=phone_number
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb.remove_reply_keyboard())

    try:
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
            f"ID: <code>{message.from_user.id}</code>\n"
            f"Username: @{escape(message.from_user.username or '')}\n"
            f"–§–ò–û: {escape(user_data.get('full_name') or '')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{escape(phone_number)}</code>",
            parse_mode="HTML",
            reply_markup=kb.admin_approval_keyboard(message.from_user.id)
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
        await message.bot.send_message(ADMIN_ID,
                                       "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —á–∞—Ç–∞ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

    await state.clear()


# --- 2. –ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–Ø–í–û–ö (–ê–î–ú–ò–ù) ---

@router.callback_query(F.data.startswith("approve_user_"))
async def approve_user(callback: CallbackQuery, bot: Bot):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = int(callback.data.split("_")[2])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
    await db.update_user_status(user_id, 'approved')
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")
    try:
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö.",
                               reply_markup=kb.get_main_menu())
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    await callback.answer()


@router.callback_query(F.data.startswith("decline_user_"))
async def decline_user(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    try:
        target_user_id = int(callback.data.split("_")[2])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
    await state.set_state(AdminActions.waiting_for_decline_reason)
    await state.update_data(target_user_id=target_user_id, admin_message_id=callback.message.message_id)
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n"
              "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ‚Äò-‚Äô –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã."),
        reply_markup=kb.back_to_menu_keyboard()
    )
    await callback.answer()


@router.message(StateFilter(AdminActions.waiting_for_decline_reason))
async def decline_reason_process(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    reason = (message.text or '').strip()
    no_reason = (reason == '-' or reason == '')
    await db.update_user_status(target_user_id, 'banned')

    # –£–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏
    notify_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    if not no_reason:
        notify_text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    try:
        await bot.send_message(target_user_id, notify_text)
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞." + (" (–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã)" if no_reason else ""))
    await state.clear()


# --- 3. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ü–†–û–°–ú–û–¢–† –ê–£–ö–¶–ò–û–ù–ê ---

@router.callback_query(F.data == "menu_current")
async def menu_current(callback: CallbackQuery, bot: Bot):
    auction = await db.get_active_auction()
    if not auction:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç.",
            reply_markup=kb.back_to_menu_keyboard()
        )
        await callback.answer()
        return

    text = await format_auction_post(auction, bot)
    await bot.edit_message_media(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        media=InputMediaPhoto(media=auction['photo_id'], caption=text, parse_mode="HTML"),
        reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
    )
    await callback.answer()


@router.callback_query(F.data == "menu_all")
async def menu_all(callback: CallbackQuery, bot: Bot):
    await render_all_auctions_page(callback, bot, page=1)


@router.callback_query(F.data.startswith("all_page_"))
async def menu_all_page(callback: CallbackQuery, bot: Bot):
    try:
        page = int(callback.data.split("_")[-1])
        if page < 1:
            page = 1
    except Exception:
        page = 1
    await render_all_auctions_page(callback, bot, page=page)


async def render_all_auctions_page(callback: CallbackQuery, bot: Bot, page: int, page_size: int = 5):
    total = await db.count_auctions()
    if total == 0:
        text = "–ü–æ–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç."
        kb_markup = kb.back_to_menu_keyboard()
    else:
        offset = (page - 1) * page_size
        auctions = await db.get_auctions_page(limit=page_size, offset=offset)
        lines = []
        for a in auctions:
            status = a['status']
            prefix = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if status == 'active' else ("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω" if status == 'finished' else status)
            if status == 'active':
                last = await db.get_last_bid(a['auction_id'])
                price = last['bid_amount'] if last else a['start_price']
                ends = a['end_time'].astimezone(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
                lines.append(f"{prefix}: ¬´{a['title']}¬ª ‚Äî {price:,.0f} ‚ÇΩ (–¥–æ {ends})")
            else:
                final = a.get('final_price')
                price_txt = f"{final:,.0f} ‚ÇΩ" if final is not None else "‚Äî"
                lines.append(f"{prefix}: ¬´{a['title']}¬ª ‚Äî {price_txt}")
        text = "\n".join(lines) if lines else "–ü–æ–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç."
        kb_markup = kb.auctions_pagination_keyboard(page=page, total=total, page_size=page_size)

    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=text,
            reply_markup=kb_markup
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—É–∫—Ü–∏–æ–Ω–æ–≤: {e}")
    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(F.data == "menu_contact")
async def menu_contact(callback: CallbackQuery):
    admin_username = "CoId_Siemens"
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{admin_username}",
        reply_markup=kb.back_to_menu_keyboard()
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    keyboard = kb.get_main_menu_admin() if str(callback.from_user.id) == ADMIN_ID else kb.get_main_menu()

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ—Ç–∞ (—Ñ–æ—Ç–æ/–ø–æ–¥–ø–∏—Å—å), —É–¥–∞–ª—è–µ–º –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é,
    # —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª—Å—è "–º–µ–Ω—é —Å —Ñ–æ—Ç–æ".
    if getattr(callback.message, "photo", None) or callback.message.caption is not None:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        except TelegramAPIError:
            # –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º —Ö–æ—Ç—è –±—ã –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
            try:
                await callback.bot.edit_message_caption(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!",
                    reply_markup=keyboard
                )
                await callback.answer()
                return
            except TelegramAPIError:
                pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
        await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!", reply_markup=keyboard)
    else:
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!",
            reply_markup=keyboard
        )
    await callback.answer()


@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=kb.admin_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_create")
async def admin_create(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await create_auction_start(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "admin_finish")
async def admin_finish(callback: CallbackQuery, bot: Bot):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    active = await db.get_active_auction()
    if not active:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞", show_alert=True)
        return
    top_bids = await db.get_top_bids(active['auction_id'], limit=5)
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞: \n\n¬´{active['title']}¬ª",
        reply_markup=kb.admin_select_winner_keyboard(top_bids)
    )
    await callback.answer()



@router.callback_query(F.data == "admin_winner_none")
async def admin_winner_none(callback: CallbackQuery, bot: Bot):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    active = await db.get_active_auction()
    if not active:
        return await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞", show_alert=True)
    await db.finish_auction(active['auction_id'], None, None)
    finished_post_text = await format_auction_post(active, bot, finished=True)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
    await callback.message.edit_text("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.", reply_markup=kb.admin_menu_keyboard())
    await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç", show_alert=True)


@router.callback_query(F.data.startswith("admin_winner_bid_"))
async def admin_winner_bid(callback: CallbackQuery, bot: Bot):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    try:
        bid_id = int(callback.data.split("_")[-1])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
    bid = await db.get_bid_by_id(bid_id)
    if not bid:
        return await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    active = await db.get_active_auction()
    if not active or active['auction_id'] != bid['auction_id']:
        return await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π
    await db.finish_auction(active['auction_id'], bid['user_id'], bid['bid_amount'])
    finished_post_text = await format_auction_post(active, bot, finished=True)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
    # –£–≤–µ–¥–æ–º–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    try:
        await bot.send_message(
            bid['user_id'],
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ¬´{active['title']}¬ª. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bid['bid_amount']:,.2f} —Ä—É–±."
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {bid['user_id']}: {e}")
    await callback.message.edit_text(
        f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {bid.get('username') or bid.get('full_name') or bid['user_id']} –∑–∞ {bid['bid_amount']:,.2f} —Ä—É–±.",
        reply_markup=kb.admin_menu_keyboard()
    )
    await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç", show_alert=True)


@router.callback_query(F.data == "admin_ban")
async def admin_ban(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AdminActions.waiting_for_ban_id)
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ ID / @username / —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:",
        reply_markup=kb.back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_unban")
async def admin_unban(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AdminActions.waiting_for_unban_id)
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ ID / @username / —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        reply_markup=kb.back_to_menu_keyboard()
    )
    await callback.answer()


@router.message(StateFilter(AdminActions.waiting_for_ban_id), F.from_user.id == int(ADMIN_ID))
async def admin_ban_handle(message: Message, state: FSMContext):
    text = message.text.strip()
    target_user_id = None

    # –ü–æ username
    if text.startswith('@'):
        user = await db.get_user_by_username(text)
        if user:
            target_user_id = user['user_id']
    else:
        # –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        normalized = normalize_phone(text)
        if normalized != text or text.startswith('+'):
            user = await db.get_user_by_phone(normalized)
            if user:
                target_user_id = user['user_id']
        # –ü–æ ID
        if target_user_id is None:
            try:
                target_user_id = int(text)
            except ValueError:
                pass

    if target_user_id is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")
        return

    await db.update_user_status(target_user_id, 'banned')
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–∞–Ω–µ–Ω.")
    await state.clear()


@router.message(StateFilter(AdminActions.waiting_for_unban_id), F.from_user.id == int(ADMIN_ID))
async def admin_unban_handle(message: Message, state: FSMContext):
    text = message.text.strip()
    target_user_id = None

    if text.startswith('@'):
        user = await db.get_user_by_username(text)
        if user:
            target_user_id = user['user_id']
    else:
        normalized = normalize_phone(text)
        if normalized != text or text.startswith('+'):
            user = await db.get_user_by_phone(normalized)
            if user:
                target_user_id = user['user_id']
        if target_user_id is None:
            try:
                target_user_id = int(text)
            except ValueError:
                pass

    if target_user_id is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")
        return

    await db.update_user_status(target_user_id, 'approved')
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    await state.clear()



# --- 4. –õ–û–ì–ò–ö–ê –°–¢–ê–í–û–ö ---

@router.callback_query(F.data.startswith("bid_auction_"))
async def make_bid_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ç–∞–≤–∫–∏."""
    auction_id = int(callback.data.split("_")[2])
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != auction_id:
        await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        try:
            await callback.message.delete()
        except Exception:
            pass
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —É—á–∞—Å—Ç–∏—è)
    if not await is_user_subscribed(bot, callback.from_user.id):
        channel_url = f"https://t.me/{CHANNEL_USERNAME}" if CHANNEL_USERNAME else None
        try:
            await callback.bot.edit_message_caption(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                caption=(
                    "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô."
                ),
                reply_markup=kb.subscribe_keyboard(channel_url, auction_id)
            )
        except TelegramAPIError:
            pass
        await callback.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å‚Äô", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏
    end_time_dt = auction['end_time']
    time_to_end = end_time_dt - datetime.now(end_time_dt.tzinfo)

    cooldown_off_before_end = int(auction.get('cooldown_off_before_end_minutes') or 0)
    cooldown_minutes = int(auction.get('cooldown_minutes') or 0)

    if cooldown_minutes > 0 and time_to_end > timedelta(minutes=cooldown_off_before_end):
        last_bid_time = await db.get_user_last_bid_time(callback.from_user.id, auction_id)
        if last_bid_time:
            elapsed = datetime.now(last_bid_time.tzinfo) - last_bid_time
            if elapsed < timedelta(minutes=cooldown_minutes):
                remaining_time = timedelta(minutes=cooldown_minutes) - elapsed
                await callback.answer(
                    f"–°–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ {max(1, remaining_time.seconds // 60)} –º–∏–Ω.", show_alert=True
                )
                return

    # –ì–æ—Ç–æ–≤–∏–º –≤–≤–æ–¥ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
    await state.set_state(Bidding.waiting_for_bid_amount)
    await state.update_data(auction_id=auction_id, private_message_id=callback.message.message_id)

    last_bid = await db.get_last_bid(auction_id)
    current_price = last_bid['bid_amount'] if last_bid else auction['start_price']

    await callback.bot.edit_message_caption(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        caption=(
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_price:,.0f} —Ä—É–±.\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {auction['min_step']:,.0f} —Ä—É–±.\n\n"
            f"{hbold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:')}"
        ),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "check_sub")
async def check_subscription_generic(callback: CallbackQuery, bot: Bot):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if await is_user_subscribed(bot, callback.from_user.id):
        keyboard = kb.get_main_menu_admin() if str(callback.from_user.id) == ADMIN_ID else kb.get_main_menu()
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
        if getattr(callback.message, "photo", None) or callback.message.caption is not None:
            try:
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            except Exception:
                pass
            await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!", reply_markup=keyboard)
        else:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!",
                reply_markup=keyboard
            )
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)






@router.callback_query(F.data.startswith("check_sub_"))
async def check_subscription(callback: CallbackQuery, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    if await is_user_subscribed(bot, callback.from_user.id):
        auction = await db.get_active_auction()
        if not auction:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç.",
                reply_markup=kb.back_to_menu_keyboard()
            )
        else:
            text = await format_auction_post(auction, bot)
            try:
                await callback.bot.edit_message_media(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    media=InputMediaPhoto(media=auction['photo_id'], caption=text, parse_mode="HTML"),
                    reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
                )
            except TelegramAPIError as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)





@router.callback_query(F.data.startswith("blitz_auction_"))
async def blitz_buy(callback: CallbackQuery, bot: Bot):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    auction_id = int(callback.data.split("_")[2])
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != auction_id:
        await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        try:
            await callback.message.delete()
        except Exception:
            pass
        return

    blitz_price = auction.get('blitz_price')
    if not blitz_price:
        await callback.answer("–ë–ª–∏—Ü-—Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞.", show_alert=True)
        return

    # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
    await db.add_bid(auction_id, callback.from_user.id, blitz_price)
    await db.finish_auction(auction_id, callback.from_user.id, blitz_price)

    finished_post_text = await format_auction_post(auction, bot, finished=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=auction['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–¥–∏–Ω —ç–∫—Ä–∞–Ω) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    try:
        await callback.bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    try:
        await bot.send_message(
            callback.from_user.id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ –ª–æ—Ç ¬´{(auction['title'])}¬ª –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ {blitz_price:,.2f} —Ä—É–±.\n\n"
            f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {callback.from_user.id} –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")

    await callback.answer("–ü–æ–∫—É–ø–∫–∞ –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", show_alert=True)

@router.message(StateFilter(Bidding.waiting_for_bid_amount), F.text)
async def process_bid_amount(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏."""
    try:
        bid_amount = parse_amount(message.text)
        if bid_amount <= 0:
            await message.answer("–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != data['auction_id']:
        await message.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–æ–∫–∞ –≤—ã –¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É.")
        await state.clear()
        return

    last_bid = await db.get_last_bid(auction['auction_id'])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç–∞–≤–∫–∏
    data = await state.get_data()
    if not await is_user_subscribed(bot, message.from_user.id):
        channel_url = f"https://t.me/{CHANNEL_USERNAME}" if CHANNEL_USERNAME else None
        try:
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=data.get('private_message_id'),
                caption=(
                    "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô."
                ),
                reply_markup=kb.subscribe_keyboard(channel_url, data.get('auction_id', 0))
            )
        except Exception:
            pass
        try:
            await message.delete()
        except Exception:
            pass
        return

    current_price = last_bid['bid_amount'] if last_bid else auction['start_price']

    # –ë–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—É–º–º—ã >= blitz_price
    blitz_price = auction.get('blitz_price')
    if blitz_price and bid_amount >= blitz_price:
        await db.add_bid(auction['auction_id'], message.from_user.id, blitz_price)
        await db.finish_auction(auction['auction_id'], message.from_user.id, blitz_price)

        finished_post_text = await format_auction_post(auction, bot, finished=True)
        try:
            await bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=auction['channel_message_id'],
                caption=finished_post_text,
                parse_mode="HTML",
                reply_markup=None
            )
        except TelegramAPIError as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")
        try:
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=data['private_message_id'],
                caption=finished_post_text,
                parse_mode="HTML",
                reply_markup=None
            )
        except TelegramAPIError as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")

        await message.answer(f"‚ö°Ô∏è –í—ã –∫—É–ø–∏–ª–∏ –ª–æ—Ç –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ {blitz_price:,.0f} —Ä—É–±.")
        await state.clear()
        return

    if bid_amount < current_price + auction['min_step']:
        await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º {current_price + auction['min_step']:,.0f} —Ä—É–±.")
        return

    previous_leader = last_bid['user_id'] if last_bid else None

    await db.add_bid(auction['auction_id'], message.from_user.id, bid_amount)
    await message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {bid_amount:,.0f} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç–∞!")
    await state.clear()
    # –ê–Ω—Ç–∏—Å–Ω–∞–π–ø–∏–Ω–≥: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å ‚â§ 2 –º–∏–Ω—É—Ç, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
    try:
        end_dt = auction['end_time']
        now_dt = datetime.now(end_dt.tzinfo)
        if (end_dt - now_dt) <= timedelta(minutes=2):
            new_end = end_dt + timedelta(minutes=2)
            await db.update_auction_end_time(auction['auction_id'], new_end)
            auction = await db.get_active_auction()
    except Exception as e:
        logging.warning(f"–ê–Ω—Ç–∏—Å–Ω–∞–π–ø–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")


    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞
    if previous_leader and previous_leader != message.from_user.id:
        try:
            await bot.send_message(previous_leader,
                                   f"‚ùóÔ∏è –í–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ '{auction['title']}' –ø–µ—Ä–µ–±–∏–ª–∏! –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {bid_amount:,.0f} —Ä—É–±.")
        except TelegramAPIError as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {previous_leader}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    new_text = await format_auction_post(auction, bot)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=auction['channel_message_id'],
            caption=new_text,
            parse_mode="HTML"
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞
    try:
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=data['private_message_id'],
            caption=new_text,
            parse_mode="HTML",
            reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è {message.chat.id}: {e}")


# --- 5. –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---

@router.message(Command("admin"), F.from_user.id == int(ADMIN_ID))
async def admin_panel(message: Message):
    """–ò–Ω–ª–∞–π–Ω –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.admin_menu_keyboard())


# --- –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ (FSM) ---
@router.message(Command("create_auction"), F.from_user.id == int(ADMIN_ID))
async def create_auction_start(message: Message, state: FSMContext):
    active_auction = await db.get_active_auction()
    if active_auction:
        await message.answer("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π.")
        return
    await state.set_state(AuctionCreation.waiting_for_title)
    await message.answer("–®–∞–≥ 1/9: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:")


@router.message(StateFilter(AuctionCreation.waiting_for_title), F.text)
async def process_auction_title(message: Message, state: FSMContext):
    title = (message.text or "").strip()
    if not title or len(title) > 120:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(title=title)
    await state.set_state(AuctionCreation.waiting_for_description)
    await message.answer("–®–∞–≥ 2/9: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")


@router.message(StateFilter(AuctionCreation.waiting_for_description), F.text)
async def process_auction_desc(message: Message, state: FSMContext):
    desc = (message.text or "").strip()
    if not desc or len(desc) > 3000:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(description=desc)
    await state.set_state(AuctionCreation.waiting_for_photo)
    await message.answer("–®–∞–≥ 3/9: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–æ—Ç–∞:")


@router.message(StateFilter(AuctionCreation.waiting_for_photo), F.photo)
async def process_auction_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(AuctionCreation.waiting_for_start_price)
    await message.answer("–®–∞–≥ 4/9: –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 150000):")


@router.message(StateFilter(AuctionCreation.waiting_for_start_price))
async def process_auction_start_price(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if value <= 0:
            await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (> 0). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(start_price=value)
        await state.set_state(AuctionCreation.waiting_for_min_step)
        await message.answer("–®–∞–≥ 5/9: –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150000).")



@router.message(StateFilter(AuctionCreation.waiting_for_min_step))
async def process_auction_min_step(message: Message, state: FSMContext):
    try:
        min_step = float(message.text)
        if min_step <= 0:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (> 0). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(min_step=min_step)
        await state.set_state(AuctionCreation.waiting_for_cooldown_minutes)
        await message.answer("–®–∞–≥ 6/9: –í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000).")


@router.message(StateFilter(AuctionCreation.waiting_for_cooldown_minutes))
async def process_auction_cooldown_minutes(message: Message, state: FSMContext):
    try:
        cooldown = int(message.text)
        if cooldown < 0:
            await message.answer("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(cooldown_minutes=cooldown)
        await state.set_state(AuctionCreation.waiting_for_cooldown_off_before_end)
        await message.answer("–®–∞–≥ 7/9: –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30). –ï—Å–ª–∏ –≤–≤–µ–¥—ë—Ç–µ 0 ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")


@router.message(StateFilter(AuctionCreation.waiting_for_cooldown_off_before_end))
async def process_auction_cooldown_off_threshold(message: Message, state: FSMContext):
    try:
        threshold = int(message.text)
        if threshold < 0:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if threshold == 0:
            # 0 = –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏
            await state.update_data(cooldown_minutes=0)
        await state.update_data(cooldown_off_before_end_minutes=threshold)
        await state.set_state(AuctionCreation.waiting_for_blitz_price)
        await message.answer("–®–∞–≥ 8/9: –í–≤–µ–¥–∏—Ç–µ –±–ª–∏—Ü-—Ü–µ–Ω—É (—á–∏—Å–ª–æ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ 0):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30).")


@router.message(StateFilter(AuctionCreation.waiting_for_blitz_price))
async def process_auction_blitz_price(message: Message, state: FSMContext):
    try:
        blitz_price = float(message.text)
        if blitz_price < 0:
            await message.answer("–ë–ª–∏—Ü-—Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –±–ª–∏—Ü-—Ü–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞.")
            return
        data = await state.get_data()
        start_price = float(data.get('start_price') or 0)
        if blitz_price > 0 and blitz_price < start_price:
            await message.answer("–ë–ª–∏—Ü-—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(blitz_price=blitz_price if blitz_price > 0 else None)
        await state.set_state(AuctionCreation.waiting_for_end_time)
        await message.answer(
            "–®–∞–≥ 9/9: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.10.2025 21:00")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300000).")


@router.message(StateFilter(AuctionCreation.waiting_for_end_time), F.text)
async def process_auction_end_time(message: Message, state: FSMContext, bot: Bot):
    try:
        naive_end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        end_time = MOSCOW_TZ.localize(naive_end_time)
        now = datetime.now(MOSCOW_TZ)
        if end_time <= now:
            await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
            return
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 10 –º–∏–Ω—É—Ç
        if end_time - now < timedelta(minutes=10):
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ ‚Äî 10 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            return
        await state.update_data(end_time=end_time)

        data = await state.get_data()

        auction_id = await db.create_auction(data)
        auction_data_full = await db.get_active_auction()
        text = await format_auction_post(auction_data_full, bot)

        sent_message = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=data['photo'],
            caption=text,
            parse_mode="HTML"
        )

        await db.set_auction_message_id(auction_id, sent_message.message_id)
        await message.answer(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω ¬´{data['title']}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
    finally:
        await state.clear()


@router.message(Command("finish_auction"), F.from_user.id == int(ADMIN_ID))
async def finish_auction_command(message: Message, bot: Bot):
    active_auction = await db.get_active_auction()
    if not active_auction:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    auction_id = active_auction['auction_id']
    last_bid = await db.get_last_bid(auction_id)

    winner_id = last_bid['user_id'] if last_bid else None
    final_price = last_bid['bid_amount'] if last_bid else None

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await db.finish_auction(auction_id, winner_id, final_price)
    await message.answer(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω ¬´{active_auction['title']}¬ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    finished_post_text = await format_auction_post(active_auction, bot, finished=True)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active_auction['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")

    # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if winner_id:
        try:
            await bot.send_message(
                winner_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ¬´{(active_auction['title'])}¬ª!\n\n"
                f"–í–∞—à–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {final_price:,.2f} —Ä—É–±.\n\n"
                f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
        except TelegramAPIError as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {winner_id}: {e}")
            await message.answer(
                f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner_id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é.")



@router.callback_query(F.data == "admin_export_users")
async def admin_export_users(callback: CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    rows = await db.get_users_with_bid_stats()
    # –ì–æ—Ç–æ–≤–∏–º CSV (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel); –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8 BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
    import io, csv
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')
    writer.writerow(["user_id", "username", "full_name", "phone_number", "status", "bids_count", "bids_sum"])
    for r in rows:
        writer.writerow([
            r.get('user_id'),
            csv_safe(("@" + r['username']) if r.get('username') else ''),
            csv_safe(r.get('full_name') or ''),
            csv_safe(r.get('phone_number') or ''),
            csv_safe(r.get('status') or ''),
            int(r.get('bids_count') or 0),
            float(r.get('bids_sum') or 0.0),
        ])
    content_text = output.getvalue()
    output.close()
    content_bytes = content_text.encode('utf-8-sig')
    buf = BufferedInputFile(content_bytes, filename="users_export.csv")
    await callback.message.answer_document(document=buf, caption="–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV; –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ Excel)")
    await callback.answer()

