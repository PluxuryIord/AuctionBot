import os
import re
import pytz
from datetime import datetime, timedelta
import logging
import io
import csv
from html import escape

from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery, User, InputMediaPhoto, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.markdown import hbold

import db as db
import kb
from states import Registration, AuctionCreation, Bidding, AdminActions

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = os.getenv("ADMIN_ID")
ADMIN_IDS = os.getenv("ADMIN_IDS").split(",")
ADMIN_IDS = list(map(int, ADMIN_IDS))
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
CHANNEL_ID = os.getenv("CHANNEL_ID")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")


async def is_user_subscribed(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        status = getattr(member, "status", None)
        return status in ("member", "administrator", "creator")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


@router.message.middleware()
@router.callback_query.middleware()
async def user_status_middleware(handler, event, data):
    """
    Middleware: –û–±–Ω–æ–≤–ª—è–µ—Ç username, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–Ω/pending —Å—Ç–∞—Ç—É—Å.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    user: User = data.get('event_from_user')
    if not user:
        return await handler(event, data)

    # –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞
    if int(user.id) in ADMIN_IDS:
        return await handler(event, data)

    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    await db.update_user_username(user.id, user.username)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º /start –≤—Å–µ–≥–¥–∞
    if isinstance(event, Message) and event.text == "/start":
        return await handler(event, data)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if isinstance(event, CallbackQuery) and event.data.startswith("check_sub"):
        return await handler(event, data)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑—Ä–µ—à–∞–µ–º FSM –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
    state: FSMContext = data.get('state')
    current_state = await state.get_state()
    if current_state and current_state.startswith("Registration:"):
        return await handler(event, data)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    status = await db.get_user_status(user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–±–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ) - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –£–ë–†–ê–ù–ê
    block_reason = None
    if status == 'banned':
        block_reason = "–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    elif status == 'pending':
        block_reason = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏."
    # elif status is None: # –≠–¢–û –£–°–õ–û–í–ò–ï –£–ë–†–ê–ù–û

    if block_reason:
        if isinstance(event, Message):
            # –ï—Å–ª–∏ FSM –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è), –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_state is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–æ–±—â–µ –µ—Å—Ç—å
                await safe_delete_message(event)
            await event.answer(block_reason)
        elif isinstance(event, CallbackQuery):
            await event.answer(block_reason, show_alert=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 'approved' –∏–ª–∏ None (–∏ –Ω–µ FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è 'approved' —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ /start
    # –∏–ª–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É/—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.
    return await handler(event, data)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def normalize_phone(phone: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX."""
    cleaned_phone = re.sub(r'\D', '', phone)
    if len(cleaned_phone) == 10 and cleaned_phone.startswith('9'):
        return '+7' + cleaned_phone
    if len(cleaned_phone) == 11 and (cleaned_phone.startswith('7') or cleaned_phone.startswith('8')):
        return '+7' + cleaned_phone[1:]
    return phone


NAME_ALLOWED_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-\s]{2,100}$")


def clean_full_name(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"\s+", " ", s)
    return s


def is_valid_full_name(s: str) -> bool:
    return bool(NAME_ALLOWED_RE.match(s))


def parse_amount(s: str) -> float:
    s = (s or "").strip().replace(" ", "").replace(",", ".")
    return float(s)


def csv_safe(s: str) -> str:
    s = s or ""
    return ("'" + s) if s[:1] in ("=", "+", "-", "@", "\t") else s


async def format_auction_post(auction_data: dict, bot: Bot, finished: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (—Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏)."""
    last_bid = await db.get_last_bid(auction_data['auction_id'])
    safe_title = escape(auction_data.get('title') or "")
    safe_description = escape(auction_data.get('description') or "")
    bot_info = await bot.get_me()

    # --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–Ø/–õ–ò–î–ï–†–ê ---
    winner_display = "–°—Ç–∞–≤–æ–∫ –µ—â–µ –Ω–µ—Ç"
    if last_bid:
        user_id = last_bid['user_id']
        username = last_bid.get('username')
        full_name = last_bid.get('full_name') or f"User {user_id}"  # Fallback
        if username:
            winner_display = f"@{username}"
        else:
            winner_display = f'<a href="tg://user?id={user_id}">{escape(full_name)}</a>'
    # ---

    if finished:
        if last_bid:
            winner_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {winner_display} —Å –≤—ã–∏–≥—Ä—ã—à–µ–º –ª–æ—Ç–∞ –∑–∞ {last_bid['bid_amount']:,.2f} —Ä—É–±.!"
            return (
                f"<b>üî¥ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                f"üíé <b>{safe_title}</b>\n\n"
                f"{winner_text}"
            )
        else:
            return (
                f"<b>üî¥ –ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                f"üíé <b>{safe_title}</b>\n\n"
                f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."
            )

    # –ê–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω
    current_price = last_bid['bid_amount'] if last_bid else auction_data['start_price']
    leader_text = winner_display  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
    end_time_dt = auction_data['end_time'].astimezone(MOSCOW_TZ)

    top_bids = await db.get_top_bids(auction_data['auction_id'], limit=5)
    history = ""
    if top_bids:
        lines = ["\n<b>üî• –¢–æ–ø-5 —Å—Ç–∞–≤–æ–∫:</b>"]
        for i, b in enumerate(top_bids, start=1):
            # --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ï–ù–ò –í –ò–°–¢–û–†–ò–ò ---
            user_id_hist = b['user_id']
            username_hist = b.get('username')
            full_name_hist = b.get('full_name') or f"User {user_id_hist}"  # Fallback
            user_disp = ""
            if username_hist:
                user_disp = f"@{username_hist}"
            else:
                user_disp = f'<a href="tg://user?id={user_id_hist}">{escape(full_name_hist)}</a>'
            # ---
            lines.append(f"{i}) {b['bid_amount']:,.0f} ‚ÇΩ ‚Äî {user_disp}")
        history = "\n".join(lines)

    blitz_price_text = ""
    if auction_data.get('blitz_price'):
        blitz_price_text = f"‚ö°Ô∏è <b>–ë–ª–∏—Ü-—Ü–µ–Ω–∞:</b> {auction_data['blitz_price']:,.2f} —Ä—É–±.\n\n"

    text = (
        f"üíé <b>{safe_title}</b>\n\n"
        f"{safe_description}\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞:</b> {current_price:,.2f} —Ä—É–±.\n"
        f"üëë <b>–õ–∏–¥–µ—Ä:</b> {leader_text}\n"
        f"{blitz_price_text}"
        f"‚è≥ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_dt.strftime('%d.%m.%Y –≤ %H:%M')} (–ú–°–ö)\n"
        f"{history}\n\n"
        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –∏ —Å—Ç–∞–≤–æ–∫ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞: @{bot_info.username}"
    )
    return text


async def find_user_by_text(text: str) -> int | None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞."""
    target_user_id = None
    text = text.strip()
    if text.startswith('@'):
        user = await db.get_user_by_username(text)
        if user:
            target_user_id = user['user_id']
    else:
        normalized = normalize_phone(text)
        if normalized != text or text.startswith('+'):
            user = await db.get_user_by_phone(normalized)
            if user:
                target_user_id = user['user_id']
        if target_user_id is None:
            try:
                target_user_id = int(text)
            except ValueError:
                pass
    return target_user_id


async def safe_delete_message(message: Message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏)."""
    try:
        await message.delete()
    except TelegramAPIError as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤
        logging.warning(f"Failed to delete message {message.message_id}: {e}")
        pass


# --- 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–ù–û–í–´–ô –ò–ù–õ–ê–ô–ù FSM) ---

async def render_registration_card(bot: Bot, chat_id: int, state: FSMContext, prompt: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    if not menu_message_id:
        logging.error(f"FSM (Registration) –≤ {chat_id} –ø–æ—Ç–µ—Ä—è–ª menu_message_id.")
        return

    full_name = escape(data.get('full_name', '...'))
    # –¢–µ–ª–µ—Ñ–æ–Ω –±–æ–ª—å—à–µ –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤ data –¥–æ –∫–æ–Ω—Ü–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º
    # phone = escape(data.get('phone_number', '...'))

    text = (
        f"<b>--- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---</b>\n\n"
        f"–§–ò–û: <code>{full_name}</code>\n"
        # f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n\n" # –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        f"\n<b>{prompt}</b>"
    )

    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=menu_message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=None  # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç
        )
    except TelegramAPIError as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—É–¥–∞–ª–µ–Ω–æ?), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM
        if "message to edit not found" in str(e):
            logging.warning(f"Registration FSM message not found for user {chat_id}, clearing state.")
            await state.clear()
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.")
        else:
            logging.warning(f"Failed to edit registration card: {e}")


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

    user_id = message.from_user.id
    user_status = await db.get_user_status(user_id)
    channel_url = f"https://t.me/{CHANNEL_USERNAME}" if CHANNEL_USERNAME else "https://t.me/test_auction2"  # Fallback URL

    if int(user_id) in ADMIN_IDS:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω! (–ê–¥–º–∏–Ω)", reply_markup=kb.get_main_menu_admin())
    elif user_status == 'banned':
        await message.answer("–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    elif user_status == 'pending':
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
    elif user_status == 'approved':
        subscribed = await is_user_subscribed(bot, user_id)
        if not subscribed:
            await message.answer(
                f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"{channel_url}\n\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô.",
                reply_markup=kb.subscribe_keyboard(channel_url)  # auction_id=0
            )
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!", reply_markup=kb.get_main_menu())
    else:
        # –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        subscribed = await is_user_subscribed(bot, user_id)
        if not subscribed:
            await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"{channel_url}\n\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô.",
                reply_markup=kb.subscribe_keyboard(channel_url)  # auction_id=0
            )
        else:
            # –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await state.set_state(Registration.waiting_for_full_name)
            menu_msg = await message.answer(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                f"{hbold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')}",
                parse_mode="HTML",
                reply_markup=None  # –ë–µ–∑ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞
            )
            await state.update_data(menu_message_id=menu_msg.message_id)


@router.message(StateFilter(Registration.waiting_for_full_name), F.text)
async def process_full_name(message: Message, state: FSMContext, bot: Bot):
    """–õ–æ–≤–∏—Ç –§–ò–û, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ."""
    await safe_delete_message(message)

    name = clean_full_name(message.text)
    if not is_valid_full_name(name):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–µ–Ω—é FSM
        await render_registration_card(
            bot=bot,
            chat_id=message.chat.id,
            state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (2‚Äì100 —Å–∏–º–≤).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    await state.update_data(full_name=name)
    await state.set_state(Registration.waiting_for_phone)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await render_registration_card(
        bot=bot,
        chat_id=message.chat.id,
        state=state,
        prompt=(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å {hbold('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')} (+7XXXXXXXXXX)\n"
            "–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (üìé -> –ö–æ–Ω—Ç–∞–∫—Ç)."  # –£–±—Ä–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        )
    )
    # Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º


async def complete_registration(message: Message, state: FSMContext, bot: Bot, phone_number: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await safe_delete_message(message)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç)

    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    full_name = data.get('full_name')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    existing = await db.get_user_by_phone(phone_number)
    if existing and existing.get('user_id') != message.from_user.id:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–µ–Ω—é FSM
        await render_registration_card(
            bot=bot,
            chat_id=message.chat.id,
            state=state,
            prompt=(
                f"‚ùå –¢–µ–ª–µ—Ñ–æ–Ω: {escape(phone_number)}\n"
                f"–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. {hbold('–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä')}:"
            )
        )
        # Reply –∫–Ω–æ–ø–∫—É –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        return

    auto_approve_enabled = await db.get_auto_approve_status()

    if auto_approve_enabled:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º
        await db.add_user_request(  # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=full_name,
            phone_number=phone_number
        )
        await db.update_user_status(message.from_user.id, 'approved')
        status_message = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
        final_markup = kb.get_main_menu()  # –°—Ä–∞–∑—É –¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        admin_notification_needed = False  # –ê–¥–º–∏–Ω—É –Ω–µ –ø–∏—à–µ–º
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω.")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await db.add_user_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=full_name,
            phone_number=phone_number
        )
        status_message = "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        final_markup = None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        admin_notification_needed = True  # –ü–∏—à–µ–º –∞–¥–º–∏–Ω—É

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é FSM
    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=status_message,
            reply_markup=final_markup
        )
        # –£–±–∏—Ä–∞–µ–º Reply Keyboard, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        await bot.send_message(
            message.chat.id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=kb.remove_reply_keyboard(),
            disable_notification=True
        )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    except TelegramAPIError:
        pass

    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if admin_notification_needed:
        try:
            # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            user_info = message.from_user
            user_display = f'<a href="tg://user?id={user_info.id}">{escape(user_info.first_name)}</a>'
            if user_info.username:
                user_display = f"@{escape(user_info.username)}"
            # ---
            await bot.send_message(
                int(ADMIN_CHAT_ID),
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
                f"ID: <code>{user_info.id}</code>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
                f"–§–ò–û (–∏–∑ –∑–∞—è–≤–∫–∏): {escape(full_name or '')}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{escape(phone_number)}</code>",
                parse_mode="HTML",
                reply_markup=kb.admin_approval_keyboard(user_info.id)
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É: {e}")


@router.message(StateFilter(Registration.waiting_for_phone), F.contact)
async def process_phone_contact(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ)."""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    phone_number = normalize_phone(message.contact.phone_number)
    if not re.fullmatch(r"\+7\d{10}", phone_number or ""):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–µ–Ω—é FSM
        await render_registration_card(
            bot=bot,
            chat_id=message.chat.id,
            state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        # Reply keyboard –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. contact_request_keyboard —É–¥–∞–ª–µ–Ω–∞
        # await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=kb.contact_request_keyboard())
        return

    await complete_registration(message, state, bot, phone_number)


@router.message(StateFilter(Registration.waiting_for_phone), F.text)
async def process_phone_text(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ (—Ç–µ–∫—Å—Ç–æ–º)."""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message)

    phone_number = normalize_phone(message.text)
    if not re.fullmatch(r"\+7\d{10}", phone_number or ""):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–µ–Ω—é FSM
        await render_registration_card(
            bot=bot,
            chat_id=message.chat.id,
            state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (+7XXXXXXXXXX).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        # Reply keyboard –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        # await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=kb.contact_request_keyboard())
        return

    await complete_registration(message, state, bot, phone_number)


# --- 2. –ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–Ø–í–û–ö (–ê–î–ú–ò–ù) (–ò–ù–õ–ê–ô–ù FSM) ---

@router.callback_query(F.data.startswith("approve_user_"))
async def approve_user(callback: CallbackQuery, bot: Bot):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    try:
        user_id = int(callback.data.split("_")[2])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)

    await db.update_user_status(user_id, 'approved')
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")

    try:
        await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö.",
                               reply_markup=kb.get_main_menu())
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    await callback.answer()


@router.callback_query(F.data.startswith("decline_user_"))
async def decline_user(callback: CallbackQuery, state: FSMContext):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    try:
        target_user_id = int(callback.data.split("_")[2])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)

    await state.set_state(AdminActions.waiting_for_decline_reason)
    await state.update_data(
        target_user_id=target_user_id,
        menu_message_id=callback.message.message_id
    )

    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=(
            f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_user_id}</code>.\n"
            f"{hbold('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).')}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ‚Äò-‚Äô –∏–ª–∏ ‚Äò0‚Äô, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã."
        ),
        parse_mode="HTML",
        reply_markup=kb.admin_cancel_fsm_keyboard()
    )
    await callback.answer()


@router.message(StateFilter(AdminActions.waiting_for_decline_reason))
async def decline_reason_process(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)

    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    menu_message_id = data.get('menu_message_id')
    reason = (message.text or '').strip()
    no_reason = (reason in ('-', '0', ''))

    await db.update_user_status(target_user_id, 'banned')

    notify_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    if not no_reason:
        notify_text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

    try:
        await bot.send_message(target_user_id, notify_text)
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    await state.clear()
    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            reply_markup=kb.admin_menu_keyboard()
        )
    except TelegramAPIError:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=kb.admin_menu_keyboard())


# --- 3. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ü–†–û–°–ú–û–¢–† –ê–£–ö–¶–ò–û–ù–ê ---

@router.callback_query(F.data == "menu_current")
async def menu_current(callback: CallbackQuery, bot: Bot):
    auction = await db.get_active_auction()
    if not auction:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç.",
            reply_markup=kb.back_to_menu_keyboard()
        )
        await callback.answer()
        return

    text = await format_auction_post(auction, bot)

    try:
        await bot.edit_message_media(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            media=InputMediaPhoto(media=auction['photo_id'], caption=text, parse_mode="HTML"),
            reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
        )
    except TelegramAPIError as e:
        logging.warning(f"Failed to edit to media: {e}. Re-sending message.")
        try:
            await callback.message.delete()
        except TelegramAPIError:
            pass

        await callback.message.answer_photo(
            photo=auction['photo_id'],
            caption=text,
            parse_mode="HTML",
            reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
        )
    await callback.answer()


@router.callback_query(F.data == "menu_all")
async def menu_all(callback: CallbackQuery, bot: Bot):
    await render_all_auctions_page(callback, bot, page=1)


@router.callback_query(F.data.startswith("all_page_"))
async def menu_all_page(callback: CallbackQuery, bot: Bot):
    try:
        page = int(callback.data.split("_")[-1])
        if page < 1:
            page = 1
    except Exception:
        page = 1
    await render_all_auctions_page(callback, bot, page=page)


async def render_all_auctions_page(callback: CallbackQuery, bot: Bot, page: int, page_size: int = 5):
    total = await db.count_auctions()
    if total == 0:
        text = "–ü–æ–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç."
        kb_markup = kb.back_to_menu_keyboard()
    else:
        offset = (page - 1) * page_size
        auctions = await db.get_auctions_page(limit=page_size, offset=offset)
        lines = []
        for a in auctions:
            status = a['status']
            prefix = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if status == 'active' else ("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω" if status == 'finished' else status)
            if status == 'active':
                last = await db.get_last_bid(a['auction_id'])
                price = last['bid_amount'] if last else a['start_price']
                ends = a['end_time'].astimezone(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
                lines.append(f"{prefix}: ¬´{a['title']}¬ª ‚Äî {price:,.0f} ‚ÇΩ (–¥–æ {ends})")
            else:
                final = a.get('final_price')
                price_txt = f"{final:,.0f} ‚ÇΩ" if final is not None else "‚Äî"
                lines.append(f"{prefix}: ¬´{a['title']}¬ª ‚Äî {price_txt}")
        text = "\n".join(lines) if lines else "–ü–æ–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç."
        kb_markup = kb.auctions_pagination_keyboard(page=page, total=total, page_size=page_size)

    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=text,
            reply_markup=kb_markup
        )
    except TelegramAPIError:
        pass
    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    await callback.answer()


@router.callback_query(F.data == "menu_contact")
async def menu_contact(callback: CallbackQuery):
    admin_username = "CoId_Siemens"  # TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ .env
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{admin_username}",
        reply_markup=kb.back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()

    keyboard = kb.get_main_menu_admin() if int(callback.from_user.id) in ADMIN_IDS else kb.get_main_menu()
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω!"

    try:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=text,
            reply_markup=keyboard
        )
    except TelegramAPIError as e:
        logging.warning(f"Failed to edit to text menu: {e}. Re-sending message.")
        try:
            await callback.message.delete()
        except TelegramAPIError:
            pass

        await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é (—Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM)."""
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    await state.clear()

    text = "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb_markup = await kb.admin_menu_keyboard() # –ò—Å–ø–æ–ª—å–∑—É–µ–º await, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–ª–∞ async

    try:
        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=text,
            reply_markup=kb_markup
        )
    except TelegramAPIError as e:
        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)
        logging.warning(f"Failed to edit admin menu: {e}. Sending new one.")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            await callback.message.delete()
        except TelegramAPIError: pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(text, reply_markup=kb_markup)

    await callback.answer()

@router.callback_query(F.data == "admin_finish")
async def admin_finish(callback: CallbackQuery, bot: Bot):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    active = await db.get_active_auction()
    if not active:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞", show_alert=True)
        return

    top_bids = await db.get_top_bids(active['auction_id'], limit=5)

    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞: \n\n¬´{active['title']}¬ª",
            reply_markup=kb.admin_select_winner_keyboard(top_bids)
        )
    except TelegramAPIError:
        pass
    await callback.answer()


@router.callback_query(F.data == "admin_winner_none")
async def admin_winner_none(callback: CallbackQuery, bot: Bot):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    active = await db.get_active_auction()
    if not active:
        return await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞", show_alert=True)
    await db.finish_auction(active['auction_id'], None, None)
    finished_post_text = await format_auction_post(active, bot, finished=True)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
    await callback.message.edit_text("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.", reply_markup=kb.admin_menu_keyboard())
    await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç", show_alert=True)


@router.callback_query(F.data.startswith("admin_winner_bid_"))
async def admin_winner_bid(callback: CallbackQuery, bot: Bot):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    try:
        bid_id = int(callback.data.split("_")[-1])
    except Exception:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
    bid = await db.get_bid_by_id(bid_id)
    if not bid:
        return await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    active = await db.get_active_auction()
    if not active or active['auction_id'] != bid['auction_id']:
        return await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)

    await db.finish_auction(active['auction_id'], bid['user_id'], bid['bid_amount'])
    finished_post_text = await format_auction_post(active, bot,
                                                   finished=True)  # format_auction_post —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –ª–æ–≥–∏–∫—É
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
    try:
        await bot.send_message(
            bid['user_id'],
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ¬´{active['title']}¬ª. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bid['bid_amount']:,.2f} —Ä—É–±."
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {bid['user_id']}: {e}")

    # --- –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ï–ù–ò –ü–û–ë–ï–î–ò–¢–ï–õ–Ø –î–õ–Ø –ê–î–ú–ò–ù–ê ---
    winner_id = bid['user_id']
    winner_username = bid.get('username')
    winner_fullname = bid.get('full_name') or f"User {winner_id}"
    winner_display_admin = ""
    if winner_username:
        winner_display_admin = f"@{winner_username}"
    else:
        winner_display_admin = f'<a href="tg://user?id={winner_id}">{escape(winner_fullname)}</a>'
    # ---

    await callback.message.edit_text(
        f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_display_admin} –∑–∞ {bid['bid_amount']:,.2f} —Ä—É–±.",
        reply_markup=kb.admin_menu_keyboard(),
        parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º parse_mode
    )
    await callback.answer("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç", show_alert=True)


# --- 4. –õ–û–ì–ò–ö–ê –°–¢–ê–í–û–ö (–ò–ù–õ–ê–ô–ù FSM) ---

@router.callback_query(F.data.startswith("bid_auction_"))
async def make_bid_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ç–∞–≤–∫–∏ (FSM)."""
    auction_id = int(callback.data.split("_")[2])
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != auction_id:
        await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        try:
            await callback.message.delete()
        except Exception:
            pass
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—É–∂–µ –≤ middleware, –Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
    if not await is_user_subscribed(bot, callback.from_user.id):
        channel_url = f"https://t.me/{CHANNEL_USERNAME}" if CHANNEL_USERNAME else None
        try:
            await callback.bot.edit_message_caption(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                caption=(
                    "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚Äô."
                ),
                reply_markup=kb.subscribe_keyboard(channel_url, auction_id)
            )
        except TelegramAPIError:
            pass
        await callback.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü—Ä–æ–≤–µ—Ä–∏—Ç—å‚Äô", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (cooldown)
    end_time_dt = auction['end_time']
    time_to_end = end_time_dt - datetime.now(end_time_dt.tzinfo)
    cooldown_off_before_end = int(auction.get('cooldown_off_before_end_minutes') or 0)
    cooldown_minutes = int(auction.get('cooldown_minutes') or 0)

    if cooldown_minutes > 0 and time_to_end > timedelta(minutes=cooldown_off_before_end):
        last_bid_time = await db.get_user_last_bid_time(callback.from_user.id, auction_id)
        if last_bid_time:
            elapsed = datetime.now(last_bid_time.tzinfo) - last_bid_time
            if elapsed < timedelta(minutes=cooldown_minutes):
                remaining_time = timedelta(minutes=cooldown_minutes) - elapsed
                await callback.answer(
                    f"–°–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ {max(1, remaining_time.seconds // 60)} –º–∏–Ω.", show_alert=True
                )
                return

    # –í—Ö–æ–¥–∏–º –≤ FSM –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
    await state.set_state(Bidding.waiting_for_bid_amount)
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∞—É–∫—Ü–∏–æ–Ω–∞
    await state.update_data(
        auction_id=auction_id,
        menu_message_id=callback.message.message_id
    )

    last_bid = await db.get_last_bid(auction_id)
    current_price = last_bid['bid_amount'] if last_bid else auction['start_price']

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Å—Ç–∞–≤–∫—É
    await callback.bot.edit_message_caption(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        caption=(
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_price:,.0f} —Ä—É–±.\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {auction['min_step']:,.0f} —Ä—É–±.\n\n"
            f"{hbold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (—á–∏—Å–ª–æ):')}"
        ),
        parse_mode="HTML",
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" (–≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ)
        reply_markup=kb.cancel_fsm_keyboard(f"show_auction_{auction_id}")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("show_auction_"))
async def show_auction_card(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è "–û—Ç–º–µ–Ω—ã" –∏–∑ FSM —Å—Ç–∞–≤–∫–∏).
    """
    await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ FSM
    auction_id_str = callback.data.split("_")[2]
    auction_id = int(auction_id_str)

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ø–æ ID. –ï—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —Ç–æ get_active_auction() –≤–µ—Ä–Ω–µ—Ç None
    auction = await db.get_active_auction()
    if not auction or auction['auction_id'] != auction_id:
        # –ï—Å–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –∫–æ–Ω—á–∏–ª—Å—è, –ø–æ–∫–∞ –º—ã –±—ã–ª–∏ –≤ FSM
        return await back_to_menu(callback, state, bot)

    text = await format_auction_post(auction, bot)
    await bot.edit_message_caption(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        caption=text,
        parse_mode="HTML",
        reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
    )
    await callback.answer()


# handlers.py

# –ò–ó–ú–ï–ù–ï–ù –•–≠–ù–î–õ–ï–† –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò (–û–°–ù–û–í–ù–û–ô)
@router.callback_query(F.data == "check_sub")  # check_sub –±–µ–∑ auction_id
async def check_subscription_generic(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö).
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_id = callback.from_user.id
    subscribed = await is_user_subscribed(bot, user_id)
    channel_url = f"https://t.me/{CHANNEL_USERNAME}" if CHANNEL_USERNAME else "https://t.me/test_auction2"  # Fallback URL

    if subscribed:
        user_status = await db.get_user_status(user_id)
        if user_status == 'approved':
            # –û–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback.message.edit_text(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=kb.get_main_menu()
            )
            await callback.answer()
        elif user_status is None:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è -> –Ω–∞—á–∏–Ω–∞–µ–º FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await state.set_state(Registration.waiting_for_full_name)
            menu_msg = await callback.message.answer(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                f"{hbold('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')}",
                parse_mode="HTML",
                reply_markup=None  # –ë–µ–∑ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞
            )
            await state.update_data(menu_message_id=menu_msg.message_id)
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        else:
            # –°–∏—Ç—É–∞—Ü–∏—è (pending/banned?), –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
            # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è pending/banned, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if callback.message.text:  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    current_text = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏." if user_status == 'pending' else "–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                    await callback.message.edit_text(current_text, reply_markup=None)
                except TelegramAPIError:
                    pass
    else:
        # –í—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ü–†–û–°–¢–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –ê–õ–ï–†–¢
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        # –ë–ª–æ–∫ try...except –¥–ª—è edit_message_text –£–î–ê–õ–ï–ù


@router.callback_query(F.data.startswith("check_sub_"))  # check_sub –° auction_id
async def check_subscription_auction(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞)."""
    user_id = callback.from_user.id
    subscribed = await is_user_subscribed(bot, user_id)

    if subscribed:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞
        try:
            auction_id_str = callback.data.split("_")[2]  # –ò–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if auction_id_str == "0":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è auction_id=0
                return await check_subscription_generic(callback, bot, state)
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ "–û—Ç–º–µ–Ω–∞", —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
            callback.data = f"show_auction_{auction_id_str}"
            await show_auction_card(callback, state, bot)
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        except (IndexError, ValueError):
            await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∞—É–∫—Ü–∏–æ–Ω–∞.", show_alert=True)
            await back_to_menu(callback, state, bot)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å caption –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


@router.callback_query(F.data.startswith("blitz_auction_"))
async def blitz_buy(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ."""
    await state.clear()  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ FSM —Å—Ç–∞–≤–∫–∏

    auction_id = int(callback.data.split("_")[2])
    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != auction_id:
        await callback.answer("–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return

    blitz_price = auction.get('blitz_price')
    if not blitz_price:
        await callback.answer("–ë–ª–∏—Ü-—Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞.", show_alert=True)
        return

    await db.add_bid(auction_id, callback.from_user.id, blitz_price)
    await db.finish_auction(auction_id, callback.from_user.id, blitz_price)
    finished_post_text = await format_auction_post(auction, bot, finished=True)

    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=auction['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")

    try:
        await callback.bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=kb.back_to_menu_keyboard()  # –ó–∞–º–µ–Ω–µ–Ω–æ None –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –±–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∏: {e}")

    try:
        await bot.send_message(
            callback.from_user.id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ –ª–æ—Ç ¬´{(auction['title'])}¬ª –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ {blitz_price:,.2f} —Ä—É–±.\n\n"
            f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )
    except TelegramAPIError:
        pass
    await callback.answer("–ü–æ–∫—É–ø–∫–∞ –ø–æ –±–ª–∏—Ü-—Ü–µ–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", show_alert=True)


@router.message(StateFilter(Bidding.waiting_for_bid_amount), F.text)
async def process_bid_amount(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏ (–ò–ù–õ–ê–ô–ù FSM)."""

    try:
        await message.delete()  # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except TelegramAPIError:
        pass

    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    auction_id = data.get('auction_id')

    auction = await db.get_active_auction()

    if not auction or auction['auction_id'] != auction_id:
        await state.clear()
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                text="–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–æ–∫–∞ –≤—ã –¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É.",
                reply_markup=kb.back_to_menu_keyboard()
            )
        except TelegramAPIError:
            pass
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    try:
        bid_amount = parse_amount(message.text)
        if bid_amount <= 0: raise ValueError
    except ValueError:
        # –ü–µ—Ä–µ-—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é —Å –æ—à–∏–±–∫–æ–π
        last_bid = await db.get_last_bid(auction_id)
        current_price = last_bid['bid_amount'] if last_bid else auction['start_price']
        try:
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                caption=(
                    f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_price:,.0f} —Ä—É–±.\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {auction['min_step']:,.0f} —Ä—É–±.\n\n"
                    f"{hbold('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150000).')}"
                ),
                parse_mode="HTML",
                reply_markup=kb.cancel_fsm_keyboard(f"show_auction_{auction_id}")
            )
        except TelegramAPIError:
            pass
        return

    last_bid = await db.get_last_bid(auction['auction_id'])
    current_price = last_bid['bid_amount'] if last_bid else auction['start_price']

    # –ë–ª–∏—Ü-–ø–æ–∫—É–ø–∫–∞
    blitz_price = auction.get('blitz_price')
    if blitz_price and bid_amount >= blitz_price:
        await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ FSM
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
        fake_callback_query = types.CallbackQuery(
            id="fake_blitz",
            from_user=message.from_user,
            chat_instance="fake",
            message=types.Message(message_id=menu_message_id, chat=message.chat, date=datetime.now()),
            data=f"blitz_auction_{auction_id}"
        )
        # –£ `blitz_buy` —Å–≤–æ–π `await state.clear()`, —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        await blitz_buy(fake_callback_query, bot, state)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    if bid_amount < current_price + auction['min_step']:
        try:
            min_bid_value = current_price + auction['min_step']
            error_text = f"–û—à–∏–±–∫–∞! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º {min_bid_value:,.0f} —Ä—É–±."
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                caption=(
                    f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_price:,.0f} —Ä—É–±.\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: {auction['min_step']:,.0f} —Ä—É–±.\n\n"
                    f"{hbold(error_text)}"
                ),
                parse_mode="HTML",
                reply_markup=kb.cancel_fsm_keyboard(f"show_auction_{auction_id}")
            )
        except TelegramAPIError:
            pass
        return

    # --- –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ---
    await state.clear()  # 2. –í—ã—Ö–æ–¥–∏–º –∏–∑ FSM

    previous_leader = last_bid['user_id'] if last_bid else None
    await db.add_bid(auction['auction_id'], message.from_user.id, bid_amount)

    # 3. –ê–Ω—Ç–∏—Å–Ω–∞–π–ø–∏–Ω–≥
    try:
        end_dt = auction['end_time']
        now_dt = datetime.now(end_dt.tzinfo)
        if (end_dt - now_dt) <= timedelta(minutes=2):
            new_end = end_dt + timedelta(minutes=2)
            await db.update_auction_end_time(auction['auction_id'], new_end)
            auction = await db.get_active_auction()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        logging.warning(f"–ê–Ω—Ç–∏—Å–Ω–∞–π–ø–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞
    if previous_leader and previous_leader != message.from_user.id:
        try:
            await bot.send_message(previous_leader,
                                   f"‚ùóÔ∏è –í–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ '{auction['title']}' –ø–µ—Ä–µ–±–∏–ª–∏! –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {bid_amount:,.0f} —Ä—É–±.")
        except TelegramAPIError as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {previous_leader}: {e}")

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    new_text_channel = await format_auction_post(auction, bot)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=auction['channel_message_id'],
            caption=new_text_channel,
            parse_mode="HTML"
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}: {e}")

    # 6. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–±—ã–≤—à–µ–µ FSM-–º–µ–Ω—é)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—à–∫—É –æ–± —É—Å–ø–µ—Ö–µ
    new_text_private = f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bid_amount:,.0f} —Ä—É–±.\n\n" + new_text_channel
    try:
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            caption=new_text_private,
            parse_mode="HTML",
            reply_markup=kb.get_auction_keyboard(auction['auction_id'], auction['blitz_price'])
        )
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è {message.chat.id}: {e}")


# --- 5. –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–ò–ù–õ–ê–ô–ù FSM) ---

@router.callback_query(F.data == "admin_ban")
async def admin_ban_start(callback: CallbackQuery, state: FSMContext):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AdminActions.waiting_for_ban_id)
    await state.update_data(menu_message_id=callback.message.message_id)

    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"{hbold('–í–≤–µ–¥–∏—Ç–µ ID / @username / —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ë–ê–ù–ê:')}",
        parse_mode="HTML",
        reply_markup=kb.cancel_fsm_keyboard("admin_menu")
    )
    await callback.answer()


@router.callback_query(F.data == "admin_unban")
async def admin_unban_start(callback: CallbackQuery, state: FSMContext):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(AdminActions.waiting_for_unban_id)
    await state.update_data(menu_message_id=callback.message.message_id)

    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"{hbold('–í–≤–µ–¥–∏—Ç–µ ID / @username / —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –†–ê–ó–ë–ê–ù–ê:')}",
        parse_mode="HTML",
        reply_markup=kb.cancel_fsm_keyboard("admin_menu")
    )
    await callback.answer()


@router.message(StateFilter(AdminActions.waiting_for_ban_id), F.from_user.id.in_(ADMIN_IDS))
async def admin_ban_handle(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.delete()
    except TelegramAPIError:
        pass

    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')

    target_user_id = await find_user_by_text(message.text)

    if target_user_id is None:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n{hbold('–í–≤–µ–¥–∏—Ç–µ ID / @username / —Ç–µ–ª–µ—Ñ–æ–Ω:')}",
                parse_mode="HTML",
                reply_markup=kb.cancel_fsm_keyboard("admin_menu")
            )
        except TelegramAPIError:
            pass
        return

    await db.update_user_status(target_user_id, 'banned')
    await state.clear()

    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–∞–Ω–µ–Ω.",
            reply_markup=kb.admin_menu_keyboard()
        )
    except TelegramAPIError:
        pass


@router.message(StateFilter(AdminActions.waiting_for_unban_id), F.from_user.id.in_(ADMIN_IDS))
async def admin_unban_handle(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.delete()
    except TelegramAPIError:
        pass

    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')

    target_user_id = await find_user_by_text(message.text)

    if target_user_id is None:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n{hbold('–í–≤–µ–¥–∏—Ç–µ ID / @username / —Ç–µ–ª–µ—Ñ–æ–Ω:')}",
                parse_mode="HTML",
                reply_markup=kb.cancel_fsm_keyboard("admin_menu")
            )
        except TelegramAPIError:
            pass
        return

    await db.update_user_status(target_user_id, 'approved')
    await state.clear()

    try:
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.",
            reply_markup=kb.admin_menu_keyboard()
        )
    except TelegramAPIError:
        pass


@router.callback_query(F.data == "admin_toggle_auto_approve")
async def toggle_auto_approve(callback: CallbackQuery, bot: Bot):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫."""
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    current_status = await db.get_auto_approve_status()
    new_status = not current_status
    await db.set_auto_approve_status(new_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    new_kb_markup = await kb.admin_menu_keyboard()
    try:
        await callback.message.edit_reply_markup(reply_markup=new_kb_markup)
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–º–µ–Ω—é: {e}")

    status_text = "–í–ö–õ–Æ–ß–ï–ù–û" if new_status else "–í–´–ö–õ–Æ–ß–ï–ù–û"
    await callback.answer(f"–ê–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫: {status_text}", show_alert=True)


@router.callback_query(F.data == "admin_bulk_approve")
async def bulk_approve_pending(callback: CallbackQuery, bot: Bot):
    """–ú–∞—Å—Å–æ–≤–æ –æ–¥–æ–±—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ pending."""
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    pending_users = await db.get_pending_users()
    if not pending_users:
        return await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.", show_alert=True)

    user_ids = [user['user_id'] for user in pending_users]
    updated_count = await db.bulk_update_user_status(user_ids, 'approved')

    await callback.answer(f"–û–¥–æ–±—Ä–µ–Ω–æ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–∞–º–∏)
    # for user_id in user_ids:
    #     try:
    #         await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", reply_markup=kb.get_main_menu())
    #     except TelegramAPIError:
    #         pass


@router.callback_query(F.data == "admin_bulk_decline")
async def bulk_decline_pending(callback: CallbackQuery, bot: Bot):
    """–ú–∞—Å—Å–æ–≤–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç (–±–∞–Ω–∏—Ç) –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ pending."""
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    pending_users = await db.get_pending_users()
    if not pending_users:
        return await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.", show_alert=True)

    user_ids = [user['user_id'] for user in pending_users]
    updated_count = await db.bulk_update_user_status(user_ids, 'banned') # –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å banned

    await callback.answer(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ (–∑–∞–±–∞–Ω–µ–Ω–æ) {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)




# --- 6. –°–û–ó–î–ê–ù–ò–ï –ê–£–ö–¶–ò–û–ù–ê (–ò–ù–õ–ê–ô–ù FSM) ---

async def render_auction_creation_card(
        bot: Bot,
        chat_id: int,
        state: FSMContext,
        prompt: str,
        kb_override: types.InlineKeyboardMarkup = None
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç "–∫–∞—Ä—Ç–æ—á–∫—É" —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –ª–æ—Ç–∞.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∫ —Ñ–æ—Ç–æ.
    """
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    if not menu_message_id:
        logging.error(f"FSM (AuctionCreation) –≤ {chat_id} –ø–æ—Ç–µ—Ä—è–ª menu_message_id.")
        return

    title = escape(data.get('title', '...'))
    desc = escape(data.get('description', '...'))
    photo = data.get('photo', None)
    start_price = data.get('start_price', '...')
    min_step = data.get('min_step', '...')
    cooldown = data.get('cooldown_minutes', '...')
    cooldown_off = data.get('cooldown_off_before_end_minutes', '...')
    blitz = data.get('blitz_price', '...')
    end_time = data.get('end_time', '...')
    if isinstance(end_time, datetime):
        end_time = end_time.strftime("%d.%m.%Y %H:%M")

    text = (
        f"<b>--- –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ---</b>\n\n"
        f"1. –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{title}</code>\n"
        f"2. –û–ø–∏—Å–∞–Ω–∏–µ: <code>{escape(desc[:50])}...</code>\n"
        f"3. –§–æ—Ç–æ: <code>{'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if photo else '...'}</code>\n"
        f"4. –°—Ç–∞—Ä—Ç. —Ü–µ–Ω–∞: <code>{start_price}</code>\n"
        f"5. –ú–∏–Ω. —à–∞–≥: <code>{min_step}</code>\n"
        f"6. –ö—É–ª–¥–∞—É–Ω (–º–∏–Ω): <code>{cooldown}</code>\n"
        f"7. –û—Ç–∫–ª. –∫—É–ª–¥–∞—É–Ω (–º–∏–Ω): <code>{cooldown_off}</code>\n"
        f"8. –ë–ª–∏—Ü-—Ü–µ–Ω–∞: <code>{blitz}</code>\n"
        f"9. –û–∫–æ–Ω—á–∞–Ω–∏–µ: <code>{end_time}</code>\n\n"
        f"<b>{prompt}</b>"
    )

    kb_markup = kb_override if kb_override else kb.admin_cancel_fsm_keyboard()
    is_photo_card = data.get('is_photo_card', False)

    try:
        if photo and is_photo_card:
            await bot.edit_message_caption(
                chat_id=chat_id, message_id=menu_message_id, caption=text,
                parse_mode="HTML", reply_markup=kb_markup
            )
        elif photo and not is_photo_card:
            await bot.delete_message(chat_id, menu_message_id)
            new_msg = await bot.send_photo(
                chat_id=chat_id, photo=photo, caption=text,
                parse_mode="HTML", reply_markup=kb_markup
            )
            await state.update_data(menu_message_id=new_msg.message_id, is_photo_card=True)
        else:
            await bot.edit_message_text(
                chat_id=chat_id, message_id=menu_message_id, text=text,
                parse_mode="HTML", reply_markup=kb_markup
            )
    except TelegramAPIError as e:
        logging.error(f"Failed to render creation card: {e}. State: {await state.get_state()} Data: {data}")
        if "message to edit not found" in str(e) or "message to delete not found" in str(e):
            await state.clear()
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, FSM —Å–±—Ä–æ—à–µ–Ω.", reply_markup=kb.admin_menu_keyboard())


async def return_to_confirmation(bot: Bot, chat_id: int, state: FSMContext):
    await state.update_data(editing=False)
    await state.set_state(AuctionCreation.waiting_for_confirmation)
    await render_auction_creation_card(
        bot=bot, chat_id=chat_id, state=state,
        prompt="–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï. –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        kb_override=kb.admin_confirm_auction_keyboard()
    )


# --- FSM –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ (—Å –æ—à–∏–±–∫–∞–º–∏ –≤ –º–µ–Ω—é) ---

@router.callback_query(F.data == "admin_create")
async def admin_create_auction_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    active_auction = await db.get_active_auction()
    if active_auction:
        await callback.answer("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π.", show_alert=True)
        return
    await state.set_state(AuctionCreation.waiting_for_title)
    await state.update_data(menu_message_id=callback.message.message_id, is_photo_card=False)
    await render_auction_creation_card(
        bot=bot, chat_id=callback.message.chat.id, state=state,
        prompt="–®–∞–≥ 1/9: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:"
    )
    await callback.answer()


@router.message(StateFilter(AuctionCreation.waiting_for_title), F.text)
async def process_auction_title(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    title = (message.text or "").strip()
    if not title or len(title) > 120:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ (1-120 —Å–∏–º–≤).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    await state.update_data(title=title)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_description)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 2/9: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞:"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_description), F.text)
async def process_auction_desc(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    desc = (message.text or "").strip()
    if not desc or len(desc) > 3000:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ (1-3000 —Å–∏–º–≤).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    await state.update_data(description=desc)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_photo)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 3/9: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–æ—Ç–∞:"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_photo), ~F.photo)
async def process_auction_wrong_photo(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    await render_auction_creation_card(
        bot=bot, chat_id=message.chat.id, state=state,
        prompt=f"{hbold('–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
    )
    return


@router.message(StateFilter(AuctionCreation.waiting_for_photo), F.photo)
async def process_auction_photo(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    data = await state.get_data()
    await state.update_data(photo=message.photo[-1].file_id)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_start_price)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 4/9: –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_start_price), F.text)
async def process_auction_start_price(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    try:
        value = float(message.text)
        if value <= 0: raise ValueError("Price must be positive")
    except ValueError:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    await state.update_data(start_price=value)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_min_step)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 5/9: –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ (—á–∏—Å–ª–æ):"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_min_step), F.text)
async def process_auction_min_step(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    try:
        min_step = float(message.text)
        if min_step <= 0: raise ValueError("Step must be positive")
    except ValueError:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –®–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    await state.update_data(min_step=min_step)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_cooldown_minutes)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 6/9: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º/—É —Å—Ç–∞–≤–∫–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, 0 = –Ω–µ—Ç):"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_cooldown_minutes), F.text)
async def process_auction_cooldown_minutes(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    try:
        cooldown = int(message.text)
        if cooldown < 0: raise ValueError("Cooldown cannot be negative")
    except ValueError:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ >).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    await state.update_data(cooldown_minutes=cooldown)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_cooldown_off_before_end)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 7/9: –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–∫–ª. –∫—É–ª–¥–∞—É–Ω (0 = –≤—Å–µ–≥–¥–∞ –≤–∫–ª):"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_cooldown_off_before_end), F.text)
async def process_auction_cooldown_off(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    try:
        threshold = int(message.text)
        if threshold < 0: raise ValueError("Threshold cannot be negative")
    except ValueError:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ >).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    await state.update_data(cooldown_off_before_end_minutes=threshold)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_blitz_price)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 8/9: –í–≤–µ–¥–∏—Ç–µ –±–ª–∏—Ü-—Ü–µ–Ω—É (0 = –Ω–µ—Ç):"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_blitz_price), F.text)
async def process_auction_blitz_price(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    try:
        blitz_price = float(message.text)
        if blitz_price < 0: raise ValueError("Blitz price cannot be negative")
    except ValueError:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ >).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    data = await state.get_data()
    start_price = float(data.get('start_price') or 0)
    if blitz_price > 0 and start_price > 0 and blitz_price < start_price:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=f"{hbold('–û—à–∏–±–∫–∞: –ë–ª–∏—Ü-—Ü–µ–Ω–∞ –¥.–±. >= —Å—Ç–∞—Ä—Ç–æ–≤–æ–π.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    await state.update_data(blitz_price=blitz_price if blitz_price > 0 else None)
    if data.get('editing', False):
        await return_to_confirmation(bot, message.chat.id, state)
    else:
        await state.set_state(AuctionCreation.waiting_for_end_time)
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt="–®–∞–≥ 9/9: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):"
        )


@router.message(StateFilter(AuctionCreation.waiting_for_end_time), F.text)
async def process_auction_end_time(message: Message, state: FSMContext, bot: Bot):
    await safe_delete_message(message)
    error_prompt = None
    try:
        naive_end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        end_time = MOSCOW_TZ.localize(naive_end_time)
        now = datetime.now(MOSCOW_TZ)
        if end_time <= now:
            error_prompt = f"{hbold('–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        elif end_time - now < timedelta(minutes=10):
            error_prompt = f"{hbold('–û—à–∏–±–∫–∞: –ú–∏–Ω. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 10 –º–∏–Ω—É—Ç.')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
    except ValueError:
        error_prompt = f"{hbold('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú).')} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
    if error_prompt:
        await render_auction_creation_card(
            bot=bot, chat_id=message.chat.id, state=state,
            prompt=error_prompt
        )
        return
    await state.update_data(end_time=end_time)
    await return_to_confirmation(bot, message.chat.id, state)


# --- 7. –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ê–£–ö–¶–ò–û–ù–ê ---

@router.callback_query(F.data == "auction_post", StateFilter(AuctionCreation.waiting_for_confirmation))
async def confirm_auction_post(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    if not data.get('photo'):
        await callback.answer("–û—à–∏–±–∫–∞: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", show_alert=True)
        await confirm_auction_edit(callback, state, bot)
        return
    try:
        if data.get('is_photo_card', False):
            await bot.edit_message_caption(
                chat_id=callback.message.chat.id, message_id=menu_message_id,
                caption="–ü—É–±–ª–∏–∫–∞—Ü–∏—è...", reply_markup=None
            )
        else:
            await bot.edit_message_text(
                "–ü—É–±–ª–∏–∫–∞—Ü–∏—è...", chat_id=callback.message.chat.id,
                message_id=menu_message_id, reply_markup=None
            )
    except TelegramAPIError as e:
        logging.warning(f"Failed to edit message during post confirmation: {e}")
        pass
    try:
        auction_id = await db.create_auction(data)
        auction_data_full = await db.get_active_auction()
        text = await format_auction_post(auction_data_full, bot)
        sent_message = await bot.send_photo(
            chat_id=CHANNEL_ID, photo=data['photo'],
            caption=text, parse_mode="HTML"
        )
        await db.set_auction_message_id(auction_id, sent_message.message_id)
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=menu_message_id)
        except TelegramAPIError:
            pass
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω ¬´{data['title']}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
            reply_markup=kb.admin_menu_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=menu_message_id)
        except TelegramAPIError:
            pass
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}",
            reply_markup=kb.admin_menu_keyboard()
        )
    finally:
        await state.clear()
    await callback.answer()


@router.callback_query(F.data == "auction_cancel", StateFilter(AuctionCreation))
async def confirm_auction_cancel(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await admin_menu(callback, state, bot)
    await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data == "auction_edit", StateFilter(AuctionCreation.waiting_for_confirmation))
async def confirm_auction_edit(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(AuctionCreation.waiting_for_edit_choice)
    await render_auction_creation_card(
        bot=bot, chat_id=callback.message.chat.id, state=state,
        prompt="–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        kb_override=kb.admin_edit_auction_fields_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_field_"), StateFilter(AuctionCreation.waiting_for_edit_choice))
async def process_auction_edit_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    field_to_state_map = {
        "title": (AuctionCreation.waiting_for_title, "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"),
        "desc": (AuctionCreation.waiting_for_description, "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"),
        "photo": (AuctionCreation.waiting_for_photo, "–®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:"),
        "price": (AuctionCreation.waiting_for_start_price, "–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞—Ä—Ç. —Ü–µ–Ω—É:"),
        "step": (AuctionCreation.waiting_for_min_step, "–®–∞–≥ 5: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω. —à–∞–≥:"),
        "cooldown": (AuctionCreation.waiting_for_cooldown_minutes, "–®–∞–≥ 6: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω:"),
        "cooldown_off": (AuctionCreation.waiting_for_cooldown_off_before_end,
                         "–®–∞–≥ 7: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª. –∫—É–ª–¥–∞—É–Ω–∞:"),
        "blitz": (AuctionCreation.waiting_for_blitz_price, "–®–∞–≥ 8: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–ª–∏—Ü-—Ü–µ–Ω—É:"),
        "time": (AuctionCreation.waiting_for_end_time, "–®–∞–≥ 9: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:"),
    }
    field = callback.data.split("_")[-1]
    if field == "back":
        await return_to_confirmation(bot, callback.message.chat.id, state)
        await callback.answer()
        return
    if field in field_to_state_map:
        new_state, prompt = field_to_state_map[field]
        await state.set_state(new_state)
        await state.update_data(editing=True)
        await render_auction_creation_card(
            bot=bot, chat_id=callback.message.chat.id, state=state,
            prompt=prompt
        )
    await callback.answer()


# --- 8. –≠–ö–°–ü–û–†–¢ (–ò–ù–õ–ê–ô–ù –§–õ–û–£) ---

@router.callback_query(F.data == "admin_export_users")
async def admin_export_users(callback: CallbackQuery, bot: Bot):
    if int(callback.from_user.id) not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    try:
        await callback.message.edit_text(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —ç–∫—Å–ø–æ—Ä—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            reply_markup=None
        )
    except TelegramAPIError:
        pass
    rows = await db.get_users_with_bid_stats()
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')
    writer.writerow(["user_id", "username", "full_name", "phone_number", "status", "bids_count", "bids_sum"])
    for r in rows:
        writer.writerow([
            r.get('user_id'),
            csv_safe(("@" + r['username']) if r.get('username') else ''),
            csv_safe(r.get('full_name') or ''),
            csv_safe(r.get('phone_number') or ''),
            csv_safe(r.get('status') or ''),
            int(r.get('bids_count') or 0),
            float(r.get('bids_sum') or 0.0),
        ])
    content_text = output.getvalue()
    output.close()
    content_bytes = content_text.encode('utf-8-sig')
    buf = BufferedInputFile(content_bytes, filename="users_export.csv")
    try:
        await callback.message.answer_document(
            document=buf,
            caption="–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)"
        )
        await callback.message.edit_text(
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\n–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=kb.admin_menu_keyboard()
        )
    except TelegramAPIError as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}",
            reply_markup=kb.admin_menu_keyboard()
        )
    await callback.answer()


# --- 9. –†–£–ß–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï (–ö–û–ú–ê–ù–î–ê) ---

@router.message(Command("finish_auction"), F.from_user.id.in_(ADMIN_IDS))
async def finish_auction_command(message: Message, bot: Bot):
    active_auction = await db.get_active_auction()
    if not active_auction:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    auction_id = active_auction['auction_id']
    last_bid = await db.get_last_bid(auction_id)
    winner_id = last_bid['user_id'] if last_bid else None
    final_price = last_bid['bid_amount'] if last_bid else None
    await db.finish_auction(auction_id, winner_id, final_price)
    await message.answer(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω ¬´{active_auction['title']}¬ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    finished_post_text = await format_auction_post(active_auction, bot, finished=True)
    try:
        await bot.edit_message_caption(
            chat_id=CHANNEL_ID,
            message_id=active_auction['channel_message_id'],
            caption=finished_post_text,
            parse_mode="HTML",
            reply_markup=None
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
    if winner_id:
        try:
            await bot.send_message(
                winner_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ ¬´{(active_auction['title'])}¬ª!\n\n"
                f"–í–∞—à–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {final_price:,.2f} —Ä—É–±.\n\n"
                f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
        except TelegramAPIError as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {winner_id}: {e}")
            await message.answer(
                f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner_id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é.")
